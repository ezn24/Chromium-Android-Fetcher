name: Publish Chromium Snapshot APK

permissions:
  contents: write  # 需要寫入 releases/tags

on:
  schedule:
    - cron: "0 6 * * 0" #
  workflow_dispatch:
    inputs:
      release-channel:
        description: "Release channel label appended to the GitHub release title"
        required: false
        default: Snapshot

jobs:
  publish:
    # 避免在 PR（尤其 fork PR）時嘗試發版
    if: github.event_name != 'pull_request'
    name: Download and release Chromium Desktop-Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Chromium snapshot (AndroidDesktop_arm64)
        id: snapshot
        run: |
          set -euo pipefail

          PLATFORM="AndroidDesktop_arm64"

          LAST_CHANGE_URL="https://storage.googleapis.com/chromium-browser-snapshots/${PLATFORM}/LAST_CHANGE"
          echo "Fetching latest revision from ${LAST_CHANGE_URL}"
          REVISION=$(curl -sSfL "${LAST_CHANGE_URL}")

          if [ -z "${REVISION}" ]; then
            echo "Failed to resolve the latest Chromium snapshot revision" >&2
            exit 1
          fi

          ZIP_URL="https://storage.googleapis.com/chromium-browser-snapshots/${PLATFORM}/${REVISION}/chrome-android-desktop.zip"
          echo "Downloading ${ZIP_URL}"
          curl -sSfL "${ZIP_URL}" -o chrome-android-desktop.zip

          APK_NAME="chromium-${REVISION}-AndroidDesktop_arm64.apk"
          echo "Extracting ChromePublic.apk into ${APK_NAME}"
          unzip -p chrome-android-desktop.zip chrome-android-desktop/apks/ChromePublic.apk > "${APK_NAME}"

          if [ ! -s "${APK_NAME}" ]; then
            echo "Failed to extract Chromium APK" >&2
            exit 1
          fi

          SHA256=$(sha256sum "${APK_NAME}" | awk '{print $1}')

          echo "apk_name=${APK_NAME}" >> "$GITHUB_OUTPUT"
          echo "revision=${REVISION}" >> "$GITHUB_OUTPUT"
          echo "platform=${PLATFORM}" >> "$GITHUB_OUTPUT"
          echo "sha256=${SHA256}" >> "$GITHUB_OUTPUT"
          echo "zip_url=${ZIP_URL}" >> "$GITHUB_OUTPUT"

      - name: Summarize download
        run: |
          echo "Chromium revision: ${{ steps.snapshot.outputs.revision }}"
          echo "Platform: ${{ steps.snapshot.outputs.platform }}"
          echo "APK: ${{ steps.snapshot.outputs.apk_name }}"
          echo "SHA256: ${{ steps.snapshot.outputs.sha256 }}"
          echo "Source: ${{ steps.snapshot.outputs.zip_url }}"

      - name: Check if release already exists (skip if same revision)
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: chromium-${{ steps.snapshot.outputs.revision }}-AndroidDesktop_arm64
        run: |
          set -euo pipefail
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG}") || true

          if [ "${STATUS}" = "200" ]; then
            echo "Release ${TAG} already exists. Skipping."
            echo "exists=true" >> "$GITHUB_OUTPUT"
          elif [ "${STATUS}" = "404" ]; then
            echo "Release ${TAG} does not exist. Will create."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          else
            echo "Unexpected status ${STATUS} when checking release. Failing to be safe." >&2
            exit 1
          fi

      - name: Create GitHub Release (only when new revision)
        if: steps.check_release.outputs.exists == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: chromium-${{ steps.snapshot.outputs.revision }}-AndroidDesktop_arm64
          name: Chromium ${{ inputs['release-channel'] || 'Snapshot' }} ${{ steps.snapshot.outputs.revision }} (AndroidDesktop_arm64)
          body: |
            * Revision: `${{ steps.snapshot.outputs.revision }}`
            * Platform directory: `${{ steps.snapshot.outputs.platform }}`
            * Download source: [chrome-android-desktop.zip](${{ steps.snapshot.outputs.zip_url }})
            * SHA256: `${{ steps.snapshot.outputs.sha256 }}`
          artifacts: ${{ steps.snapshot.outputs.apk_name }}
          artifactContentType: application/vnd.android.package-archive
          allowUpdates: true
          replacesArtifacts: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip note (no new revision)
        if: steps.check_release.outputs.exists == 'true'
        run: echo "No new revision detected. Release step skipped."
